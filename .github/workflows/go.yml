name: Go

on:
  push:
    branches:
      - '**'
    tags:
      - "v*"
  pull_request:
    branches:
      - '**'
  repository_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
      - name: Run Unit Tests
        run: |
          go test -v -parallel 8 -coverprofile=coverage.txt -covermode=atomic -tags=unit ./...
          go tool cover -func=coverage.txt | tee coverage.out
          if [[ $(grep "total:" coverage.out | awk '{print $3}' | sed 's/%//') < 75 ]]; then
            echo "Code coverage is below 75%"
            exit 1
          fi
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-${{ matrix.go-version }}
          path: coverage.txt



  coverage:
    name: Combined Coverage Report
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      - name: Download coverage reports
        uses: actions/download-artifact@v3
      - name: Merge coverage reports
        run: |
          echo "mode: atomic" > coverage.txt
          for report in unit-coverage-*/coverage.txt; do
            tail -n +2 "$report" >> coverage.txt
          done
          go tool cover -func=coverage.txt | tee coverage.out
          echo "Total coverage:"
          grep "total:" coverage.out
      - name: Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: coverage.txt

  build:
    name: Build
    needs: [unit-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    permissions:
      contents: read
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
        id: go



      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          args: --timeout=5m

      - name: Build Provider
        run: |
          # Build for verification
          go build -v .
          
          # Build with optimization flags for release
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" .
          fi

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.1.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: v1.10.3
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
