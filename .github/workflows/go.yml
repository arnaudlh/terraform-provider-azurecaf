name: Go

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./... -coverprofile=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 7

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          $(go env GOPATH)/bin/golangci-lint --version

      - name: Run golangci-lint
        run: |
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m --issues-exit-code=0

  terraform-validation:
    name: Terraform Examples Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check if examples directory exists
        id: check_examples
        run: |
          if [ -d "examples" ]; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "::warning::No examples directory found, skipping Terraform validation"
          fi

      - name: Setup Terraform
        if: steps.check_examples.outputs.EXISTS == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'
      
      - name: Check for Terraform files
        if: steps.check_examples.outputs.EXISTS == 'true'
        id: check_tf_files
        run: |
          if find examples -name "*.tf" | grep -q .; then
            echo "TF_FILES_EXIST=true" >> $GITHUB_OUTPUT
          else
            echo "TF_FILES_EXIST=false" >> $GITHUB_OUTPUT
            echo "::warning::No .tf files found in examples directory"
          fi

      - name: Terraform Format
        if: steps.check_examples.outputs.EXISTS == 'true' && steps.check_tf_files.outputs.TF_FILES_EXIST == 'true'
        run: terraform fmt -check -recursive -diff examples/

      - name: Prepare for Terraform Init
        if: steps.check_examples.outputs.EXISTS == 'true' && steps.check_tf_files.outputs.TF_FILES_EXIST == 'true'
        run: |
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/aztfmod/azurecaf/1.0.0/linux_amd64
          cp $(go env GOPATH)/bin/terraform-provider-azurecaf ~/.terraform.d/plugins/registry.terraform.io/aztfmod/azurecaf/1.0.0/linux_amd64/terraform-provider-azurecaf

      - name: Terraform Init
        if: steps.check_examples.outputs.EXISTS == 'true' && steps.check_tf_files.outputs.TF_FILES_EXIST == 'true'
        run: |
          cd examples
          terraform init -backend=false

      - name: Terraform Validate
        if: steps.check_examples.outputs.EXISTS == 'true' && steps.check_tf_files.outputs.TF_FILES_EXIST == 'true'
        run: |
          cd examples
          terraform validate || echo "::warning::Terraform validation failed, but continuing workflow"

  release:
    name: Release
    needs: [build, lint, terraform-validation]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
