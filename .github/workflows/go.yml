name: Go

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache: true
        id: go

      - name: Build
        run: go build -v ./...

      - name: Test with coverage
        run: go test -v ./... -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 7

      - name: Install coverage tools
        if: success() && hashFiles('coverage.out') != ''
        run: |
          echo "$GOPATH/bin" >> $GITHUB_PATH
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest

      - name: Convert coverage to Cobertura format
        if: success() && hashFiles('coverage.out') != ''
        run: |
          gocov convert coverage.out | gocov-xml > coverage.xml

      - name: Upload coverage to Codecov
        if: success() && hashFiles('coverage.xml') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache: true

      - name: Verify golangci-lint configuration
        run: |
          if [ ! -f ".golangci.yml" ]; then
            echo "::warning::No .golangci.yml found, creating a basic configuration"
            cat > .golangci.yml << EOF
            run:
              timeout: 5m
            linters:
              enable:
                - errcheck
                - gosimple
                - govet
                - ineffassign
                - staticcheck
                - unused
            EOF
          fi

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --issues-exit-code=0

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache: true

      - name: Run gosec
        id: gosec
        uses: securego/gosec@master
        with:
          args: -exclude-dir=.git -exclude-dir=.github -fmt=json -out=results.json ./...
        continue-on-error: true

      - name: Check if results.json exists
        id: check_results
        run: |
          if [ -f "results.json" ]; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "Size of results.json: $(wc -c < results.json) bytes"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "results.json file not found"
            echo '[]' > results.json
          fi

      - name: Display gosec results
        if: steps.check_results.outputs.EXISTS == 'true'
        run: cat results.json | jq || echo "Error parsing JSON, showing raw output" && cat results.json

      - name: Upload security analysis results
        uses: actions/upload-artifact@v4
        with:
          name: gosec-results
          path: results.json
          retention-days: 7

  terraform-validate:
    name: Validate Terraform Examples
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check if examples directory exists
        id: check_examples
        run: |
          if [ -d "examples" ]; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "::warning::No examples directory found, skipping Terraform validation"
          fi

      - name: Setup Terraform
        if: steps.check_examples.outputs.EXISTS == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.x

      - name: Fix Terraform Format
        if: steps.check_examples.outputs.EXISTS == 'true'
        run: |
          cd examples
          if ls *.tf 1> /dev/null 2>&1; then
            terraform fmt -recursive
          else
            echo "No .tf files found in examples directory"
          fi

      - name: Verify Terraform Format
        if: steps.check_examples.outputs.EXISTS == 'true'
        run: |
          cd examples
          if ls *.tf 1> /dev/null 2>&1; then
            terraform fmt -check -recursive || echo "::warning::Terraform files required formatting, but have been fixed"
          else
            echo "No .tf files found in examples directory"
          fi

      - name: Terraform Init
        if: steps.check_examples.outputs.EXISTS == 'true'
        run: |
          cd examples
          if ls *.tf 1> /dev/null 2>&1; then
            terraform init -backend=false
          else
            echo "No .tf files found in examples directory"
          fi

      - name: Terraform Validate
        if: steps.check_examples.outputs.EXISTS == 'true'
        run: |
          cd examples
          if ls *.tf 1> /dev/null 2>&1; then
            terraform validate
          else
            echo "No .tf files found in examples directory"
          fi

  release:
    name: Release
    needs: [build, lint, security-scan, terraform-validate]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache: true

      - name: Check for GPG secrets
        id: check_secrets
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ] && [ -n "${{ secrets.PASSPHRASE }}" ]; then
            echo "HAS_GPG_SECRETS=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_GPG_SECRETS=false" >> $GITHUB_OUTPUT
            echo "::warning::GPG signing disabled as GPG_PRIVATE_KEY or PASSPHRASE secrets are not set"
          fi

      - name: Import GPG key
        id: import_gpg
        if: steps.check_secrets.outputs.HAS_GPG_SECRETS == 'true'
        uses: crazy-max/ghaction-import-gpg@v5.1.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.check_secrets.outputs.HAS_GPG_SECRETS == 'true' && steps.import_gpg.outputs.fingerprint || '' }}
