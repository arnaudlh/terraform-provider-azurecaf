name: Go

on:
  push:
    branches:
      - '**'
    tags:
      - "v*"
  pull_request:
    branches:
      - '**'
  repository_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
      - name: Run Unit Tests
        run: |
          go test -v -parallel 8 -coverprofile=coverage.txt -covermode=atomic -tags=unit ./...
          go tool cover -func=coverage.txt
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: unit-coverage-${{ matrix.go-version }}
          path: coverage.txt

  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
      - name: Run Integration Tests
        run: |
          go test -v -parallel 4 -coverprofile=coverage.txt -covermode=atomic -tags=integration ./...
          go tool cover -func=coverage.txt
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: integration-coverage-${{ matrix.go-version }}
          path: coverage.txt

  build:
    name: Build
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    permissions:
      contents: read
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod
        id: go



      - name: Build
        run: |

          go build -v ./...

      - name: Run Unit Tests
        if: ${{ github.job == 'unit-tests' }}
        run: |
          go test -v -parallel 8 -coverprofile=coverage.txt -covermode=atomic -tags=unit ./...
          go tool cover -func=coverage.txt

      - name: Run Integration Tests
        if: ${{ github.job == 'integration-tests' }}
        run: |
          go test -v -parallel 4 -coverprofile=coverage.txt -covermode=atomic -tags=integration ./...
          go tool cover -func=coverage.txt

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.go-version }}
          path: coverage.txt

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          chmod -R 777 $(go env GOPATH)/bin

      - name: Run golangci-lint
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run --timeout=5m

      - name: Build Provider
        run: |
          go build -v .

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.1.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: v1.10.3
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
