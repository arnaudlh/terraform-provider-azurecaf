name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/security.yml'
  schedule:
    # Run security scans every day at 2 AM UTC
    - cron: '0 2 * * *'

# Restrict permissions for all jobs
permissions:
  contents: read

jobs:
  # Vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: './go.mod'
        cache: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'

    - name: Upload Gosec SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

    - name: Run Nancy vulnerability scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

  # Microsoft Security DevOps
  msdo-scan:
    name: Microsoft Security DevOps
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Microsoft Security DevOps
      uses: microsoft/security-devops-action@v1
      id: msdo
      with:
        categories: 'code,dependencies,containers,IaC'

    - name: Upload MSDO SARIF results to GitHub
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: './go.mod'
        cache: true

    - name: Check for known vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run go mod audit
      run: |
        go mod download
        go list -m all | awk 'NR>1 {print $1"@"$2}' | xargs -I {} sh -c 'echo "Checking: {}"; go list -m -json {} | jq -r ".Path, .Version"'

  # License compliance check
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: './go.mod'
        cache: true

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        go-licenses check ./...
        go-licenses csv ./... > licenses.csv

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.csv
        retention-days: 30

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, msdo-scan, dependency-check, license-check]
    if: always()
    steps:
    - name: Check security scan results
      run: |
        echo "Security Scan Results:"
        echo "Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
        echo "MSDO Scan: ${{ needs.msdo-scan.result }}"
        echo "Dependency Check: ${{ needs.dependency-check.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        
        if [ "${{ needs.vulnerability-scan.result }}" == "success" ] && \
           [ "${{ needs.msdo-scan.result }}" == "success" ] && \
           [ "${{ needs.dependency-check.result }}" == "success" ] && \
           [ "${{ needs.license-check.result }}" == "success" ]; then
          echo "✅ All security checks passed!"
        else
          echo "⚠️ Some security checks failed or had issues"
          echo "Please review the individual scan results above"
        fi
