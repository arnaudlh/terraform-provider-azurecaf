name: E2E Tests

on:
  push:
    branches:
      - '**'
    tags:
      - "v*"
  pull_request:
    branches:
      - '**'

permissions:
  contents: read

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23']
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -OL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          unzip terraform_1.5.7_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Build Provider
        run: |
          go build -o terraform-provider-azurecaf
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/aztfmod/azurecaf/2.0.0-preview4/linux_amd64/
          cp terraform-provider-azurecaf ~/.terraform.d/plugins/registry.terraform.io/aztfmod/azurecaf/2.0.0-preview4/linux_amd64/

      - name: Generate Test Configuration
        run: |
          mkdir e2e-test && cd e2e-test
          cat > main.tf << 'EOF'
          terraform {
            required_providers {
              azurecaf = {
                source  = "aztfmod/azurecaf"
                version = "2.0.0-preview4"
              }
            }
          }

          provider "azurecaf" {}

          # Test common Azure resource types
          locals {
            test_cases = {
              rg = {
                name = "myapp"
                type = "azurerm_resource_group"
                prefixes = ["dev"]
                suffixes = ["001"]
              }
              st = {
                name = "data"
                type = "azurerm_storage_account"
                prefixes = ["dev"]
                random_length = 5
                use_slug = true
                separator = ""
              }
              kv = {
                name = "secrets"
                type = "azurerm_key_vault"
                prefixes = ["dev"]
                random_length = 5
              }
              func = {
                name = "api"
                type = "azurerm_function_app"
                prefixes = ["dev"]
                suffixes = ["func"]
              }
              cosmos = {
                name = "db"
                type = "azurerm_cosmosdb_account"
                prefixes = ["dev"]
                random_length = 4
              },
              vnet = {
                name = "network"
                type = "azurerm_virtual_network"
                prefixes = ["dev"]
                suffixes = ["vnet"]
              },
              webapp = {
                name = "web"
                type = "azurerm_app_service"
                prefixes = ["dev"]
                suffixes = ["app"]
              },
              acr = {
                name = "registry"
                type = "azurerm_container_registry"
                prefixes = ["dev"]
                random_length = 4
                use_slug = true
                separator = ""
              }
            }
          }

          # Test resources
          resource "azurecaf_name" "test" {
            for_each = local.test_cases
            
            name = each.value.name
            resource_type = each.value.type
            prefixes = try(each.value.prefixes, [])
            suffixes = try(each.value.suffixes, [])
            random_length = try(each.value.random_length, 0)
            clean_input = true
            separator = try(each.value.separator, "-")
            use_slug = try(each.value.use_slug, false)
          }

          # Test data sources
          data "azurecaf_name" "test" {
            for_each = local.test_cases
            
            name = each.value.name
            resource_type = each.value.type
            prefixes = try(each.value.prefixes, [])
            suffixes = try(each.value.suffixes, [])
            random_length = try(each.value.random_length, 0)
            clean_input = true
            separator = try(each.value.separator, "-")
            use_slug = try(each.value.use_slug, false)
          }

          # Outputs for validation
          output "resource_results" {
            value = {
              for k, v in azurecaf_name.test : k => v.result
            }
          }

          output "data_source_results" {
            value = {
              for k, v in data.azurecaf_name.test : k => v.result
            }
          }

          # Verify data source and resource results match
          output "validation" {
            value = {
              for k, v in azurecaf_name.test : k => (
                v.result == data.azurecaf_name.test[k].result ? "PASS" : "FAIL: ${v.result} != ${data.azurecaf_name.test[k].result}"
              )
            }
          }
          EOF

      - name: Run Terraform Tests
        run: |
          cd e2e-test
          terraform init
          terraform plan
          terraform apply -auto-approve
          terraform output
