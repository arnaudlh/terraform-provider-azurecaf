name: Unit Tests

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/unit-tests.yml'
      - 'Makefile'

# Avoid duplicate workflows on PRs from the same repository
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
        id: go

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: Run golangci-lint
        run: golangci-lint run ./...
        
      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
        
      - name: Run staticcheck
        run: staticcheck ./...
        
      - name: Run go vet
        run: go vet ./...
        
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
        
      - name: Run gosec
        run: gosec ./...
        
      - name: Verify gofmt
        run: |
          gofmt_files=$(gofmt -l .)
          if [[ -n "${gofmt_files}" ]]; then
            echo "The following files need formatting with gofmt:"
            echo "${gofmt_files}"
            exit 1
          fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-group: [
          "resource_name",
          "resource_naming_convention",
          "data_name",
          "data_environment_variable",
          "provider",
          "TestGetResource",
          "TestTrimResourceName",
          "TestValidateResourceType",
          "TestGetResourceName",
          "TestGetNameResult",
          "TestGetResult"
        ]
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
        id: go

      - name: Run unit tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.${{ matrix.test-group }}.out -covermode=atomic ./azurecaf -run ${{ matrix.test-group }}
          go tool cover -func=coverage.${{ matrix.test-group }}.out
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.${{ matrix.test-group }}.out | grep total | awk '{print $3}' | tr -d '%')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 100" | bc -l) )); then
            echo "Test coverage is below 100%"
            exit 1
          fi
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage.${{ matrix.test-group }}.out
          
  coverage-merge:
    name: Merge Coverage Reports
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
          
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        
      - name: Install gocovmerge
        run: go install github.com/wadey/gocovmerge@latest
        
      - name: Merge coverage reports
        run: |
          gocovmerge coverage-*/coverage.*.out > coverage.total.out
          go tool cover -func=coverage.total.out
          
      - name: Upload merged coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.total.out
          fail_ci_if_error: false
