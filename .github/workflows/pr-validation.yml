name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache: true

      - name: Verify PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types:
            - feat
            - fix
            - docs
            - style
            - refactor
            - perf
            - test
            - build
            - ci
            - chore
            - revert

      - name: Check for large files
        run: |
          # Fail if any files are larger than 1MB
          large_files=$(find . -type f -not -path "*/\.*" -size +1M | grep -v "\.git")
          if [ -n "$large_files" ]; then
            echo "ERROR: The following files are larger than 1MB:"
            echo "$large_files"
            exit 1
          fi

      - name: Ensure PR has description
        if: github.event.pull_request.body == ''
        run: |
          echo "ERROR: Pull request is missing a description"
          exit 1

      - name: Check for sensitive data
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests for modified packages
        run: |
          # Get list of modified Go files
          go_files=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.go$' || true)
          
          if [ -n "$go_files" ]; then
            # Extract unique packages
            packages=$(echo "$go_files" | xargs -n1 dirname | sort -u)
            
            # Run tests only for affected packages
            for pkg in $packages; do
              if [ -d "$pkg" ]; then
                echo "Testing package: $pkg"
                go test -v ./$pkg/...
              fi
            done
          else
            echo "No Go files modified, skipping targeted tests"
          fi